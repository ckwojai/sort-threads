#+TITLE: Readme
* Resource
- Using Intellij Idea with Gradle: [[https://www.jetbrains.com/help/idea/getting-started-with-gradle.html][guide to get started]]
- Oracle API Doc on [[https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveAction.html][RecursiveAction]]
- java2s.com: [[http://www.java2s.com/Tutorials/Java/Java_Thread_How_to/Concurrent/Do_quick_sort_with_ForkJoinPool_and_RecursiveAction.htm][Java Thread How to - Do quick sort with ForkJoinPool and RecursiveAction]]
- GeeksForGeeks: [[https://www.geeksforgeeks.org/quick-sort/][QuickSort]]
- GeeksForGeeks: [[https://www.geeksforgeeks.org/merge-sort/][MergeSort]]
- StackOverFlow with [[https://stackoverflow.com/questions/19925820/fork-join-collecting-results][Quicksort Implementation in the comment]]
- Ocpj8 that explains t1.fork -> t2.compute -> t1.join: [[https://ocpj8.javastudyguide.com/ch28.html][Fork/Join Framework]]
- Oracle API Ref: [[https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html][Comparable Interface]]
-
* Steps
 1) [X] Set Up Local Java Development Environment
 2) [X] Include and Understand ForkJoin Library
 3) [X] Understand QuickSort and MergeSort
 4) [X] Create RecursiveAction class that extends RecursiveAction
 5) [X] Implement Comparable interfae for input objects
    - ~MergeSortTask<T extends Comparable>~ ensures each object of type T in input ~ArrayList<T>~ implements the Comparable interface
    - Uses ~obj1.comparedTo(obj2) < 0~ to check if obj1 is less than obj2
 6) [X] Implement threaded MergeSort
 7) [ ] Implement threaded QuickSort
* Team
| Name         | Email                  |
|--------------+------------------------|
| Kin Chang    | kinwo.chang@sjsu.edu   |
| Sarah Yu     | kunhong.yu@sjsu.edu    |
| Kyra Forster | kyra.foerster@sjsu.edu |
